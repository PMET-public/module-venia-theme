@import 'variables/_aspect_ratios.less';

.aspect-ratio-empty(@min-height: @aspect-ratio_min-height, @max-height: @aspect-ratio_max-height) {
    position: relative;
    min-height: @min-height;
    max-height: @max-height;
    &:before {
        display: block;
        content: "";
        width: 100%;
    }
}

.aspect-ratio-set-size(@width, @height) when (isnumber(@width)) and (isnumber(@height)) {
    &:before {
        padding-top: percentage(@height / @width);
    }
}

.aspect-ratio-content-position(@vertical: false, @horizontal: false, @text-align: center) {
    position: absolute;
    text-align: @text-align;
    & when (@vertical = top) {
        top: 0;
    }
    & when (@vertical = middle) and not (@horizontal = center) {
        top: 50%;
        transform: translateY(-50%);
    }
    & when (@vertical = bottom) {
        bottom: 0;
    }
    & when (@horizontal = left) {
        left: 0;
    }
    & when (@horizontal = center) and not (@vertical = middle) {
        left: 50%;
        transform: translateX(-50%);
    }
    & when (@horizontal = right) {
        right: 0;
    }
    & when (@horizontal = center) and (@vertical = middle) {
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
}

/*
 * The two separate mixins were written to prevent duplicate generated css for the pre-generated aspect ratio sizes
 * This mixin is for convenience so the user doesn't have to declare both mixins every time. It also includes parameters
 * for min-height and max-height for additional convenience is it is expected those will be set anyway when used in
 * custom code.
 */
.aspect-ratio(@width, @height, @min-height: @aspect-ratio_min-height, @max-height: @aspect-ratio_max-height) {
    .aspect-ratio-empty(@min-height, @max-height);
    .aspect-ratio-set-size(@width, @height);
}
